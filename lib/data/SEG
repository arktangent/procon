// 作用素つき牛木
template <typename T, typename E> struct SegmentTree {
    using F = function<T(T, T)>;
    using G = function<T(T, E)>;
    int n;
    F f;
    G g;
    T d1;
    E d0;
    vector<T> dat;
    SegmentTree(){};
    SegmentTree(int n_, F f, G g, T d1, vector<T> v = vector<T>())
        : f(f), g(g), d1(d1) {
        init(n_);
        if(n_ == (int)v.size()) build(n_, v);
    }
    void init(int n_) {
        n = 1;
        while(n < n_) n *= 2;
        dat.clear();
        dat.resize(2 * n - 1, d1);
    }
    void build(int n_, vector<T> v) {
        for(int i = 0; i < n_; i++) dat[i + n - 1] = v[i];
        for(int i = n - 2; i >= 0; i--)
            dat[i] = f(dat[i * 2 + 1], dat[i * 2 + 2]);
    }
    void update(int k, E a) {
        k += n - 1;
        dat[k] = g(dat[k], a);
        while(k > 0) {
            k = (k - 1) / 2;
            dat[k] = f(dat[k * 2 + 1], dat[k * 2 + 2]);
        }
    }
    inline T query(int a, int b) {
        T vl = d1, vr = d1;
        for(int l = a + n, r = b + n; l < r; l >>= 1, r >>= 1) {
            if(l & 1) vl = f(vl, dat[(l++) - 1]);
            if(r & 1) vr = f(dat[(--r) - 1], vr);
        }
        return f(vl, vr);
    }
};

//うし木 0-indexed
template <typename T, typename E> struct SegmentTree {
    typedef function<T(T, T)> F;
    typedef function<T(T, E)> G;
    int n;
    F f;
    G g;
    T e1;
    vector<T> dat;
    SegmentTree(){};
    SegmentTree(int n_, F f, G g, T e1, vector<T> v = vector<T>())
        : f(f), g(g), e1(e1) {
        init(n_);
        if(n_ == (int)v.size()) build(n_, v);
    }
    void init(int n_) {
        n = 1;
        while(n < n_) n *= 2;
        dat.clear();
        dat.resize(2 * n - 1, e1);
    }
    void build(int n_, vector<T> v) {
        for(int i = 0; i < n_; i++) dat[i + n - 1] = v[i];
        for(int i = n - 2; i >= 0; i--)
            dat[i] = f(dat[i * 2 + 1], dat[i * 2 + 2]);
    }
    void update(int k, E a) {
        k += n - 1;
        dat[k] = g(dat[k], a);
        while(k > 0) {
            k = (k - 1) / 2;
            dat[k] = f(dat[k * 2 + 1], dat[k * 2 + 2]);
        }
    }
    inline T query(int a, int b) {
        T vl = e1, vr = e1;
        for(int l = a + n, r = b + n; l < r; l >>= 1, r >>= 1) {
            if(l & 1) vl = f(vl, dat[(l++) - 1]);
            if(r & 1) vr = f(dat[(--r) - 1], vr);
        }
        return f(vl, vr);
    }
};
ll e1 = 0;
auto f = [](ll a, ll b) { return a + b; };
auto g = [](ll a, ll b) { return b; };
SegmentTree<ll,ll>(N + 1, f, g, e1, VL(N + 1))

//遅延seg
template <typename T, typename E> struct SegmentTree {
    using F = function<T(T, T)>;
    using G = function<T(T, E)>;
    using H = function<E(E, E)>;
    using P = function<E(E, int)>;
    int n;
    // dat(出力)のマージ（更新）
    F f;
    // lazをdatに反映演算
    G g;
    // laz(更新)のパージ（更新）（下に伝播）
    H h;
    // lazをdatに反映演算(まとめ)
    P p;
    T e1;
    E e2;
    vector<T> dat;
    vector<E> laz;
    SegmentTree(int n_, F f, G g, H h, T e1, E e2, vector<T> v = vector<T>(),
                P p = [](E a, int b) { return a; })
        : f(f), g(g), h(h), e1(e1), e2(e2), p(p) {
        init(n_);
        if(n_ == (int)v.size()) build(n_, v);
    }
    void init(int n_) {
        n = 1;
        while(n < n_) n *= 2;
        dat.clear();
        dat.resize(2 * n - 1, e1);
        laz.clear();
        laz.resize(2 * n - 1, e2);
    }
    void build(int n_, vector<T> v) {
        for(int i = 0; i < n_; i++) dat[i + n - 1] = v[i];
        for(int i = n - 2; i >= 0; i--)
            dat[i] = f(dat[i * 2 + 1], dat[i * 2 + 2]);
    }
    inline void eval(int len, int k) {
        if(laz[k] == e2) return;
        if(k * 2 + 1 < n * 2 - 1) {
            laz[k * 2 + 1] = h(laz[k * 2 + 1], laz[k]);
            laz[k * 2 + 2] = h(laz[k * 2 + 2], laz[k]);
        }
        dat[k] = g(dat[k], p(laz[k], len));
        laz[k] = e2;
    }
    T update(int a, int b, E x, int k, int l, int r) {
        eval(r - l, k);
        if(r <= a || b <= l) return dat[k];
        if(a <= l && r <= b) {
            laz[k] = h(laz[k], x);
            return g(dat[k], p(laz[k], r - l));
        }
        eval(r - l, k);
        return dat[k] = f(update(a, b, x, k * 2 + 1, l, (l + r) / 2), update(a, b, x, k * 2 + 2, (l + r) / 2, r));
    }
    T update(int a, int b, E x) { return update(a, b, x, 0, 0, n); }
    T query(int a, int b, int k, int l, int r) {
        eval(r - l, k);
        if(r <= a || b <= l) return e1;
        if(a <= l && r <= b) return dat[k];
        T vl = query(a, b, k * 2 + 1, l, (l + r) / 2);
        T vr = query(a, b, k * 2 + 2, (l + r) / 2, r);
        return f(vl, vr);
    }
    T query(int a, int b) { return query(a, b, 0, 0, n); }
};
ll e1 = 0,e2=0;
auto f = [](ll a, ll b) { return a + b; };
auto g = [](ll a, ll b) { return b; };
auto h = [](ll a, ll b) { return b; };
auto p = [](ll a, ll b) { return a*b; };
SegmentTree<ll,ll> seg(N + 1, f, g, h, e1,e2, VL(N + 1),p);

