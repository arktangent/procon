map<ll,ll> zip;
VL unzip;

ll compress(vector<ll> &x) {
    sort(x.begin(), x.end());
    x.erase(unique(x.begin(),x.end()),x.end());
    unzip.resize(x.size());
    for(ll i = 0; i < x.size(); i++){
        zip[x[i]] = i;
        unzip[i] = x[i];
    }
    return x.size();
}

template <typename T> vector<T> compress(vector<T> v) {
    sort(v.begin(), v.end());
    v.erase(unique(v.begin(), v.end()), v.end());
    return v;
}

template <typename T> map<T, int> dict(const vector<T> &v) {
    map<T, int> res;
    for(int i = 0; i < (int)v.size(); i++) res[v[i]] = i;
    return res;
}

//二次元