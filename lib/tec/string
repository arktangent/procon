//find program
vector<string> split(string str, char del) {
    ll first = 0;
    ll last = str.find_first_of(del);
 
    vector<string> result;
 
    while (first < str.size()) {
        string subStr(str, first, last - first);
 
        result.push_back(subStr);
 
        first = last + 1;
        last = str.find_first_of(del, first);
 
        if (last == string::npos) {
            last = str.size();
        }
    }
 
    return result;
}

//for program
std::vector<std::string> split(std::string str, char del) {
    std::vector<std::string> result;
    std::string subStr;

    for(const char c : str) {
        if(c == del) {
            result.push_back(subStr);
            subStr.clear();
        } else {
            subStr += c;
        }
    }

    result.push_back(subStr);
    return result;
}

vector<ll> find_all(const std::string str, const std::string subStr) {
    vector<ll> result;
 
    ll subStrSize = subStr.size();
    ll pos = str.find(subStr);
 
    while (pos != std::string::npos) {
        result.push_back(pos);
        pos = str.find(subStr, pos + subStrSize);
    }
 
    return result;
}