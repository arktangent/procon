//find program
vector<string> split(string str, char del) {
    ll first = 0;
    ll last = str.find_first_of(del);
 
    vector<string> result;
 
    while (first < str.size()) {
        string subStr(str, first, last - first);
 
        result.push_back(subStr);
 
        first = last + 1;
        last = str.find_first_of(del, first);
 
        if (last == string::npos) {
            last = str.size();
        }
    }
 
    return result;
}

//for program
std::vector<std::string> split(std::string str, char del) {
    std::vector<std::string> result;
    std::string subStr;

    for(const char c : str) {
        if(c == del) {
            result.push_back(subStr);
            subStr.clear();
        } else {
            subStr += c;
        }
    }

    result.push_back(subStr);
    return result;
}

vector<ll> find_all(const std::string str, const std::string subStr) {
    vector<ll> result;
 
    ll subStrSize = subStr.size();
    ll pos = str.find(subStr);
 
    while (pos != std::string::npos) {
        result.push_back(pos);
        pos = str.find(subStr, pos + subStrSize);
    }
 
    return result;
}


template <class T>
std::vector<std::string> split(const std::string &s, const T &separator, bool ignore_empty = 0, bool split_empty = 0) {
    struct {
        auto len(const std::string &s) { return s.length(); }
        auto len(const std::string::value_type *p) {
            return p ? std::char_traits<std::string::value_type>::length(p) : 0;
        }
        auto len(const std::string::value_type c) {
            return c == std::string::value_type() ? 0 : 1; /*return 1;*/
        }
    } util;

    if(s.empty()) { /// empty string ///
        if(!split_empty || util.len(separator)) return {""};
        return {};
    }

    auto v = std::vector<std::string>();
    auto n = static_cast<std::string::size_type>(util.len(separator));
    if(n == 0) { /// empty separator ///
        if(!split_empty) return {s};
        for(auto &&c : s) v.emplace_back(1, c);
        return v;
    }

    auto p = std::string::size_type(0);
    while(1) { /// split with separator ///
        auto pos = s.find(separator, p);
        if(pos == std::string::npos) {
            if(ignore_empty && p - n + 1 == s.size()) break;
            v.emplace_back(s.begin() + p, s.end());
            break;
        }
        if(!ignore_empty || p != pos)
            v.emplace_back(s.begin() + p, s.begin() + pos);
        p = pos + n;
    }
    return v;
}
