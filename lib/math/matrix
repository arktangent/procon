// 正方行列の積
vector<VL> matmul(vector<VL> a, vector<VL> b) {
    ll len = a[0].size();
    vector<VL> ret(len, VL(len, 0));
    REP(i, len) REP(j, len) REP(k, len) {
        ret[i][j] += a[i][k] * b[k][j];
        ret[i][j] %= MOD;
    }
    return ret;
}

vector<VL> matpow(vector<VL> m, ll n) {
    ll len = m[0].size();
    if(n == 0) {
        REP(i, len) REP(j, len) { m[i][j] = (i == j); }
        return m;
    }
    auto res = matpow(matmul(m, m), n / 2);
    if(n & 1) res = matmul(m, res);
    return res;
}

using vec = vector<mint>;
using mat = vector<vec>;

mat matmul(const mat &A, const mat &B) {
    mat ret(A.size(), vec(B[0].size()));
    REP(i, A.size()) REP(j, B[0].size()) REP(k, B.size()) {
        ret[i][j] += A[i][k] * B[k][j];
    }
    return ret;
}

mat matpow(mat A, ll n) {
    mat ret(A.size(), vec(A.size()));
    REP(i, A.size()) ret[i][i] = 1;
    while(n) {
        if(n & 1) ret = matmul(ret, A);
        A = matmul(A, A);
        n >>= 1;
    }
    return ret;
}
