const ll NMAX=1e6;
ll fac[NMAX+1],inv[NMAX+1],finv[NMAX+1];

void cominit(){
    fac[0]=fac[1]=1;
    finv[0]=finv[1]=1;
    inv[1]=1;
    FOR(i,2,NMAX+1){
        fac[i]=fac[i-1]*i%MOD;
        inv[i]=MOD-inv[MOD%i]*(MOD/i)%MOD;
        finv[i]=finv[i-1]*inv[i]%MOD;
    }
}

ll comb(ll n, ll k){
    if(n<k) return 0;
    if(n<0 || k<0) return 0;
    return fac[n]*(finv[k]*finv[n-k]%MOD)%MOD;
}

ll hcomb(ll n, ll k){
    return comb(n+k-1,k);
}

// divide number
dp[0][0] = 1;
REP(i, N + 1) FOR(j, 1, M + 1) {
    if(i - j >= 0) {
        dp[i][j] += dp[i - j][j];
    }
    if(j) {
        dp[i][j] += dp[i][j - 1];
    }
}

int next_combination(int sub) {
    int x = sub & -sub, y = sub + x;
    return (((sub & ~y) / x) >> 1) | y;
}

//部分集合
ll subpart(ll sup,sub){
    return (sub-1)&sup;
}

const ll NMAX = 1e2;
ll com[NMAX + 1][NMAX + 1];

void cominit() {
    com[0][0] = 1;
    for(int i = 1; i <= NMAX; ++i) {
        for(int j = 0; j <= i; ++j) {
            com[i][j] += com[i - 1][j];
            if(j > 0) com[i][j] += com[i - 1][j - 1];
        }
    }
}

ll comb(ll n, ll r) {
    if(n < 0 || r < 0 || n < r) return 0;
    if(n == r || !r) return 1;
    return com[n][r];
}

// comb probablity
double C[1002][1002];

void cominit() {
    C[0][0] = 1.0;
    REP(i, 1001) REP(j, 1001) {
        C[i + 1][j] += C[i][j] / 2.0;
        C[i + 1][j + 1] += C[i][j] / 2.0;
    }
}

double comb(ll n, ll k) { return C[n][k]; }